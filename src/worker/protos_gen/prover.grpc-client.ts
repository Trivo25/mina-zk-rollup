// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "prover.proto" (syntax proto3)
// tslint:disable
import { ProverService } from "./prover";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { EchoResponse } from "./prover";
import type { EchoRequest } from "./prover";
import * as grpc from "@grpc/grpc-js";
// === SERVICES ===

/**
 * @generated from protobuf service ProverService
 */
export interface IProverServiceClient {
    /**
     * @generated from protobuf rpc: Echo(EchoRequest) returns (EchoResponse);
     */
    echo(input: EchoRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
}
// === SERVICES ===

/**
 * @generated from protobuf service ProverService
 */
export class ProverServiceClient extends grpc.Client implements IProverServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Echo(EchoRequest) returns (EchoResponse);
     */
    echo(input: EchoRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: EchoResponse) => void)): grpc.ClientUnaryCall {
        const method = ProverService.methods[0];
        return this.makeUnaryRequest<EchoRequest, EchoResponse>(`/${ProverService.typeName}/${method.name}`, (value: EchoRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): EchoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
