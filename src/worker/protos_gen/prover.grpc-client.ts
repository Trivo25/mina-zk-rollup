// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "prover.proto" (syntax proto3)
// tslint:disable
import { ProverService } from "./prover.js";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { ProofRequest } from "./prover.js";
import type { VerifyResponse } from "./prover.js";
import type { VerifyRequest } from "./prover.js";
import type { ChallengeResponse } from "./prover.js";
import type { ChallengeRequest } from "./prover.js";
import type { EchoResponse } from "./prover.js";
import type { EchoRequest } from "./prover.js";
import * as grpc from "@grpc/grpc-js";
// === SERVICES ===

/**
 * @generated from protobuf service ProverService
 */
export interface IProverServiceClient {
    /**
     * @generated from protobuf rpc: Echo(EchoRequest) returns (EchoResponse);
     */
    echo(input: EchoRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    echo(input: EchoRequest, callback: (err: grpc.ServiceError | null, value?: EchoResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: RequestChallenge(ChallengeRequest) returns (ChallengeResponse);
     */
    requestChallenge(input: ChallengeRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ChallengeResponse) => void): grpc.ClientUnaryCall;
    requestChallenge(input: ChallengeRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ChallengeResponse) => void): grpc.ClientUnaryCall;
    requestChallenge(input: ChallengeRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ChallengeResponse) => void): grpc.ClientUnaryCall;
    requestChallenge(input: ChallengeRequest, callback: (err: grpc.ServiceError | null, value?: ChallengeResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Verify(VerifyRequest) returns (VerifyResponse);
     */
    verify(input: VerifyRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: VerifyResponse) => void): grpc.ClientUnaryCall;
    verify(input: VerifyRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: VerifyResponse) => void): grpc.ClientUnaryCall;
    verify(input: VerifyRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: VerifyResponse) => void): grpc.ClientUnaryCall;
    verify(input: VerifyRequest, callback: (err: grpc.ServiceError | null, value?: VerifyResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ProveBatch(ProofRequest) returns (ProofRequest);
     */
    proveBatch(input: ProofRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ProofRequest) => void): grpc.ClientUnaryCall;
    proveBatch(input: ProofRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ProofRequest) => void): grpc.ClientUnaryCall;
    proveBatch(input: ProofRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ProofRequest) => void): grpc.ClientUnaryCall;
    proveBatch(input: ProofRequest, callback: (err: grpc.ServiceError | null, value?: ProofRequest) => void): grpc.ClientUnaryCall;
}
// === SERVICES ===

/**
 * @generated from protobuf service ProverService
 */
export class ProverServiceClient extends grpc.Client implements IProverServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Echo(EchoRequest) returns (EchoResponse);
     */
    echo(input: EchoRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EchoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: EchoResponse) => void)): grpc.ClientUnaryCall {
        const method = ProverService.methods[0];
        return this.makeUnaryRequest<EchoRequest, EchoResponse>(`/${ProverService.typeName}/${method.name}`, (value: EchoRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): EchoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: RequestChallenge(ChallengeRequest) returns (ChallengeResponse);
     */
    requestChallenge(input: ChallengeRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ChallengeResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ChallengeResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ChallengeResponse) => void)): grpc.ClientUnaryCall {
        const method = ProverService.methods[1];
        return this.makeUnaryRequest<ChallengeRequest, ChallengeResponse>(`/${ProverService.typeName}/${method.name}`, (value: ChallengeRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ChallengeResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Verify(VerifyRequest) returns (VerifyResponse);
     */
    verify(input: VerifyRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: VerifyResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: VerifyResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: VerifyResponse) => void)): grpc.ClientUnaryCall {
        const method = ProverService.methods[2];
        return this.makeUnaryRequest<VerifyRequest, VerifyResponse>(`/${ProverService.typeName}/${method.name}`, (value: VerifyRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): VerifyResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ProveBatch(ProofRequest) returns (ProofRequest);
     */
    proveBatch(input: ProofRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ProofRequest) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ProofRequest) => void), callback?: ((err: grpc.ServiceError | null, value?: ProofRequest) => void)): grpc.ClientUnaryCall {
        const method = ProverService.methods[3];
        return this.makeUnaryRequest<ProofRequest, ProofRequest>(`/${ProverService.typeName}/${method.name}`, (value: ProofRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ProofRequest => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
