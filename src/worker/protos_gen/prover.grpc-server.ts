// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "prover.proto" (syntax proto3)
// tslint:disable
import { ChallengeResponse } from "./prover.js";
import { ChallengeRequest } from "./prover.js";
import { EchoResponse } from "./prover.js";
import { EchoRequest } from "./prover.js";
import type * as grpc from "@grpc/grpc-js";
// === SERVICES ===

/**
 * @generated from protobuf service ProverService
 */
export interface IProverService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: Echo(EchoRequest) returns (EchoResponse);
     */
    echo: grpc.handleUnaryCall<EchoRequest, EchoResponse>;
    /**
     * @generated from protobuf rpc: RequestChallenge(ChallengeRequest) returns (ChallengeResponse);
     */
    requestChallenge: grpc.handleUnaryCall<ChallengeRequest, ChallengeResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service ProverService.
 *
 * Usage: Implement the interface IProverService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IProverService = ...
 * server.addService(proverServiceDefinition, service);
 * ```
 */
export const proverServiceDefinition: grpc.ServiceDefinition<IProverService> = {
    echo: {
        path: "/ProverService/Echo",
        originalName: "Echo",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EchoResponse.fromBinary(bytes),
        requestDeserialize: bytes => EchoRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EchoResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(EchoRequest.toBinary(value))
    },
    requestChallenge: {
        path: "/ProverService/RequestChallenge",
        originalName: "RequestChallenge",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ChallengeResponse.fromBinary(bytes),
        requestDeserialize: bytes => ChallengeRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ChallengeResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ChallengeRequest.toBinary(value))
    }
};
