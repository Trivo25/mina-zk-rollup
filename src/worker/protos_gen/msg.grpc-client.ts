// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "msg.proto" (syntax proto3)
// tslint:disable
import { MsgSerivce } from './msg.js';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { Msg } from './msg.js';
import * as grpc from '@grpc/grpc-js';
/**
 * @generated from protobuf service MsgSerivce
 */
export interface IMsgSerivceClient {
  /**
   * @generated from protobuf rpc: Echo(Msg) returns (Msg);
   */
  echo(
    input: Msg,
    metadata: grpc.Metadata,
    options: grpc.CallOptions,
    callback: (err: grpc.ServiceError | null, value?: Msg) => void
  ): grpc.ClientUnaryCall;
  echo(
    input: Msg,
    metadata: grpc.Metadata,
    callback: (err: grpc.ServiceError | null, value?: Msg) => void
  ): grpc.ClientUnaryCall;
  echo(
    input: Msg,
    options: grpc.CallOptions,
    callback: (err: grpc.ServiceError | null, value?: Msg) => void
  ): grpc.ClientUnaryCall;
  echo(
    input: Msg,
    callback: (err: grpc.ServiceError | null, value?: Msg) => void
  ): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service MsgSerivce
 */
export class MsgSerivceClient extends grpc.Client implements IMsgSerivceClient {
  private readonly _binaryOptions: Partial<
    BinaryReadOptions & BinaryWriteOptions
  >;
  constructor(
    address: string,
    credentials: grpc.ChannelCredentials,
    options: grpc.ClientOptions = {},
    binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}
  ) {
    super(address, credentials, options);
    this._binaryOptions = binaryOptions;
  }
  /**
   * @generated from protobuf rpc: Echo(Msg) returns (Msg);
   */
  echo(
    input: Msg,
    metadata:
      | grpc.Metadata
      | grpc.CallOptions
      | ((err: grpc.ServiceError | null, value?: Msg) => void),
    options?:
      | grpc.CallOptions
      | ((err: grpc.ServiceError | null, value?: Msg) => void),
    callback?: (err: grpc.ServiceError | null, value?: Msg) => void
  ): grpc.ClientUnaryCall {
    const method = MsgSerivce.methods[0];
    return this.makeUnaryRequest<Msg, Msg>(
      `/${MsgSerivce.typeName}/${method.name}`,
      (value: Msg): Buffer =>
        Buffer.from(method.I.toBinary(value, this._binaryOptions)),
      (value: Buffer): Msg => method.O.fromBinary(value, this._binaryOptions),
      input,
      metadata as any,
      options as any,
      callback as any
    );
  }
}
